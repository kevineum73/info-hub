// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  questions    Question[]
  answers      Answer[]
  articles     Article[]
  comments     Comment[]
  votes        Vote[]
  bookmarks    Bookmark[]
  reputation   Int        @default(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  published   Boolean   @default(true)
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  answers     Answer[]
  tags        Tag[]
  votes       Vote[]
  viewCount   Int       @default(0)
  bookmarks   Bookmark[]
}

model Answer {
  id          String    @id @default(cuid())
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  questionId  String
  isAccepted  Boolean   @default(false)
  author      User      @relation(fields: [authorId], references: [id])
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes       Vote[]
  comments    Comment[]
}

model Article {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  published   Boolean   @default(true)
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  tags        Tag[]
  votes       Vote[]
  viewCount   Int       @default(0)
  bookmarks   Bookmark[]
  comments    Comment[]
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  articleId   String?
  article     Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  answerId    String?
  answer      Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  questions   Question[]
  articles    Article[]
}

model Vote {
  id          String    @id @default(cuid())
  value       Int       // 1 for upvote, -1 for downvote
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId  String?
  question    Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerId    String?
  answer      Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  articleId   String?
  article     Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId, answerId, articleId])
}

model Bookmark {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId  String?
  question    Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  articleId   String?
  article     Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId, articleId])
} 